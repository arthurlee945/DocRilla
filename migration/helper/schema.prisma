generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://public_user:Qwer1234@localhost:5432/postgres"
}

enum user_role {
  ADMIN
  MODERATOR
  USER
  MOCK
}

model account {
  id                  Int     @id @default(autoincrement())
  user_id             Int
  type                String
  provider            String
  provider_account_id String?
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user usr @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model usr {
  id                       Int       @id @default(autoincrement())
  name                     String?
  email                    String    @unique
  email_verified           Boolean?  @default(false)
  email_verification_token String?
  password                 String?
  role                     user_role @default(USER)
  password_changed_at      DateTime?
  reset_password_token     String?
  reset_password_expires   DateTime?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @default(now()) @updatedAt
  active                   Boolean   @default(true)
  accounts                 account[]
  sessions                 session[]
  projects                 project[]
}

model session {
  id            Int      @id @default(autoincrement())
  session_token String   @unique
  user_id       Int
  expires       DateTime
  user          usr      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model verification_token {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum project_type {
  TEXT
  IMAGE
  NUMBER
}

model project {
  id           Int          @id @default(autoincrement())
  user_id      Int
  uuid         String       @unique @default(uuid())
  route        String       @unique @default(uuid())
  token        String?
  title        String
  description  String?
  document_url String
  archived     Boolean      @default(false)
  visited_at   DateTime?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  fields       field[]
  submissions  submission[]
  user         usr          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([uuid])
}

model field {
  id         Int               @id @default(autoincrement())
  uuid       String            @unique @default(uuid())
  project_id String
  x          Float
  y          Float
  width      Float
  height     Float
  page       Int
  type       project_type
  fields     submitted_field[]
  project    project           @relation(fields: [project_id], references: [uuid], onDelete: Cascade)

  @@index([uuid])
}

model submission {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid())
  project_id       String
  submitted_at     DateTime          @default(now())
  submitted_fields submitted_field[]
  project          project           @relation(fields: [project_id], references: [uuid], onDelete: Cascade)

  @@index([uuid])
}

model submitted_field {
  id            Int        @id @default(autoincrement())
  field_id      String
  submission_id String
  value         Bytes
  submission    submission @relation(fields: [submission_id], references: [uuid], onDelete: Cascade)
  field         field      @relation(fields: [field_id], references: [uuid], onDelete: Cascade)
}
